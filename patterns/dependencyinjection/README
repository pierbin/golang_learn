Dependency Injection is one of the most important design principles for keeping software “loose-coupling and easy to maintain”.
This principle is widely used in all kind of development platforms and there are many excellent tools related to it.

Benefits of Using Wire:
1. Because wire uses code generation, the resulting container code is obvious and readable.
2. Easy debug. If any dependency is missing or being unused, an error will be reported during compiling.

If wire is not installed, when you run "wire", it will have error "could not import github.com/google/wire (invalid package name: "")".

So, firstly, please install wire:
% go get -d github.com/google/wire/cmd/wire

The last and an important one, you should add "// +build wireinject" at the top of wire.go.
If not, you will see a "redeclared" issue.
After you add "// +build wireinject", it will generate a line "//go:build wireinject" above on the line "// +build wireinject", if you
use GoLand.

Some common examples are:
1. Other services. Making your code more modular, less duplicate code and more testable.

2. Configuration. Such as a database passwords, API URL endpoints, etc.

3. System or environment state.
Such as the clock or file system. This comes in extremely important when writing tests that depend on time or random data.

4. Stubs of external APIs.
So that API requests can be mocked within the system during tests to keep things stable and quick.


Some terminology:
1. A service is an instance of a class.
It’s called a service because its often referred to by name rather than type.
For example Emailer is the name of a service, but it is an instance of a SendEmail.
We can change the underlying implementation of a service.
As long as it has the same interface we need not rename the service.

2. A container is a collection of services.
Services are lazy-loaded and only initialized when they are requested from the container.

3. A singleton is an instance that is initialised once, but can be reused many times.